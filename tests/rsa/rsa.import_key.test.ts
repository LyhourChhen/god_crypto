import { RSA } from "./../../rsa.ts";
import { assertEquals } from "https://deno.land/std@0.63.0/testing/asserts.ts";

Deno.test("RSA - Import JWK Public Key", () => {
  const jwk = {
    e: "AQAB",
    alg: "RS256",
    use: "sig",
    n: "7NfiTQcshWgrEdKbHC2e1s92kK-YX7jS3JLFIBpT8f_j_b5y3dQdtFFS4vBoVNQkwep_34x_ihYlhA3QkwaTL2XMSiedjLnubFZBUjs7G0dgGIR3F8A06Bf5KT4g2x1dKVb0Lwwqg22XIfqaS88HdU5pDwcVmq4pVMaJQgUK-xFEC_sHdfqTV8Z0uBCr9Nik_7xz68FINDYyLhehnvwph9ui-8_WeDgU_h5xrG8H7oY28y2NCtBwXxIadB-K8pHxK2srM8wTCIivdyZS80P0jZMqyxPkt4fO33-GQWvelVmR0bS4Arb3Y4bXnoAMCEao3DTm0bgeNVz39274ippJSQ",
    kty: "RSA",
    kid: "0a7dc12664590c957ffaebf7b6718297b864ba91",
  };

  const key = RSA.importKey(jwk);
  assertEquals(
    key.n,
    29898696334083768896266718702903171091859023056380305309417814312144807651236219776572988301924887627930068177446780412276940629516142064593112933354190594654697661829130606057587381851965706738909234655495626384372595795359236395774819608658749454999590004164863045288407450035910884781406353708688482649485901718330442366762092993760752462641504190676097552830866364434725980527790004239511223633036676476183317655075621501198026388523929916443949606011158134681907852424177605535928134115519418874993982126227290991413378693772648195647359413482755806577610702326142298069698977819919395238440777867763969032866121n,
  );
  assertEquals(key.e, 65537n);
  assertEquals(key.length, 256);
});

Deno.test("RSA - Import Certificate PEM", () => {
  const cert = `-----BEGIN CERTIFICATE-----
  MIIC8DCCAdgCAQMwDQYJKoZIhvcNAQELBQAwPDE6MDgGA1UEAwwxTXlTUUxfU2Vy
  dmVyXzUuNy4xN19BdXRvX0dlbmVyYXRlZF9DQV9DZXJ0aWZpY2F0ZTAeFw0yMDA2
  MDMwNzExMjBaFw0zMDA2MDEwNzExMjBaMEAxPjA8BgNVBAMMNU15U1FMX1NlcnZl
  cl81LjcuMTdfQXV0b19HZW5lcmF0ZWRfQ2xpZW50X0NlcnRpZmljYXRlMIIBIjAN
  BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtupn4nzv5elNq6+L8MzuSuUYmwCt
  EojEZ9vtv83DTQI24brXVk1/1ccOGe5hGGu4aTTpXU5LOb1V6v4robe0Vt3BuPsw
  GHZRt1LE/BQcuuZ0f/TCBafdEdLLpUP5TBUCVomKvZFxu+5P44bJW1d4iWsXUkyZ
  gO5TtF7x7PQvRVtsblaD4a8Et1qs58PNWN5AbOQw8GYokaSbkXDnP24ZTZbdNwu6
  W521oJuG9HFvIM6trGjoZR7N2NxJCUtq8OjTtmUqa5BVyTBJegp+pgLZEn/YDLag
  ll2Gx8xBOp0axxpzbc7P0JODCz21sh4ttyhyMMVjNPbn/vitgKpn0sdctQIDAQAB
  MA0GCSqGSIb3DQEBCwUAA4IBAQBbMXuLz2qZYqgZc/2CuD4w8E+sF4n1fWpdb9EP
  GWsHiyevEOF15YNkGlqQ8r4+h87TfL+SR4gw3PqfXEXuCkM3FuWvCulPTp/cFb7z
  T+EcNgGKuLbLpRdi0XpvyLtG9B5yi3nvhl8XHh31xFZ0WiTgwvdwUw/bQ+fKR6xQ
  8e0oj3SBjhcXmH5pmakFFeBjChIEPDkte5ImB6JwtwAlfvP/yTJEJxb9fUHEkR4A
  Q258orSdJ6gNn0XC7grCTpPYpMv2foIE0lPR1BryDD+M0QeBsLENlVNFEtnNLTcI
  UWFGFt5RctaF1ApP+inoTYapAQoDjTrOWcWYBJMkgKDk65Tg
  -----END CERTIFICATE-----`;

  const key = RSA.importKey(cert);
  assertEquals(key.e, 65537n);
  assertEquals(
    key.n,
    23090961311737573793101890708283924695433283000385054150823173852612673758230706931831331316346585281948637691806795052569468114184708524749728610979168598273283877538163829031755269185449374762314082288398270538054993384545276491531066649969558630423935152857250299602221281913410774031127740158653973996811337367884788028635132184093457045502358896056164012639638637637694971273993250785116955454220202034598919946428438516582026303702956399809398972276905876470428715345135826409789537975085486698172979761097583691702126455811212002371429452274581681294432992139097164326433615550289131259416635196384643694156981n,
  );
  assertEquals(key.length, 256);
});

Deno.test("RSA - Import Private Key (PKCS8)", () => {
  const raw = `-----BEGIN PRIVATE KEY-----
  MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCVZ6og4XGxLAHH
  ZwHm27AtUMP6+8wFqllvup0Tr0V21YvxzPxWjav2+mLOIM8upa7pzvcpc5EiCH58
  denmLJsygqo0r2B8WhzHY+rCIWJfV2YSZxjzpvSAHfzLJrDphXgqgnCNxEjRsuyC
  YAiGLIMK0huY90A5MMMArgUzkx8kMd/fq/Gd9Xt5iI+F7NlylJ+arnJc306pgGHK
  3NN2GBX1vnSuCB280SUXkZfTBeykyDZ6YrAq0XpnCNV9JyHqLQ4EmjEhc2yUo3aN
  RyXNMBddZx3HCLFcxwZCVAp0tQkAd7ErsUD5P5DR8RIJ3frklSUUZB6EkDw8G7KL
  WKVcNQ2FAgMBAAECggEABVqkmOQ4s2PzlgkDDdofxJFL+KhXMyPGlo+uNd32hA/v
  4YTaTSLAv8t7c3jEW/RW4ezyDrj5bD9i2FnPEu8pyk6u7qTon67eBaeMapO7h1Wl
  5DEazo5+3WwrBT+4ICI8QG+8vK6E+ojU23DkFU+D4a/OX+C1GzzmsWqgZ+z/inKL
  aMwS6rsWROUlgA1x5zNSoqC3SJFllVXXew5UyANTsBjvQ5J2Mmb9g8CEaAOn+xMk
  xNlwTlDot+09nFJ9vvAWirUkZdsYNnlY+zrDQoPT7Am5jtKTHmMI1KfWNfmznyji
  RltdnWfd8Bg0H7VtwrhWMWGs8QkATUAE+fC3qS144QKBgQDNFLk8eMwK6koMoNmY
  vsRAf1Y6Xdd+LUN+TJqkZiUEySaKy8NLi71IBbzK7zKqbYXDPUFCbNJFhOlluKOw
  bsKPkwBjR0JfoXVzbUdE+2tM2YccswaJe7iinZxr0wHGXIvJL0HNVIzmNggS7+Zm
  rEsdCyFXnTT/83o1wVW3E/lspQKBgQC6gBVyYCP7AxYHTSRDCgcpsTO7HyzuY92t
  aYOhRJFC7HNbzJbVdVsfnbtQH/Epe8ySk91GyFZ1dSJrxetcLhHsS2TMrkYUmY4x
  bJnqzJTh7cgWBP9DuWYvSJxPooSpFwbh2L12vQ2ADpwwoAZMLkAagaGlY9MZz821
  XY+KkOLnYQKBgQCQ49lTTgzqkUirz2Cst+qznsNvDSnYbWZH7xs6lygET5E5cmiS
  ETIzlkoiHgjvu91LaRWYNoYAs7yqL18Godo30aXufkP4iHwQht5ZcEAI1Y7NyfYO
  YCi8SxpeW3/fgzcHdqnIxbmeVAI0TuW7GHMhG+H8oob1ZjGrlOJYLHaGOQKBgDLO
  vgkAxAyYFKI8k8pnqvfivJMXtSfksPmTKzb99QzkWbEClXzlkcOVNvhnG04P2fV8
  ruWfol4xYQU3UB02t89F4toYCCOIicJRMcVToqPCIaZOCjSrB3mOMHdJcRaXnVpd
  r4/vhQQD9u0QS2bpmrEd66mg/lujzwi/ymEXg5lBAoGAacrPblD+G/DAmTUt3tZw
  GLdIvw4BeDyCvzxkJx1Z04rMZH71EEyBDPMBByZNPtjpTuzgAZE71MiD3BVLxj/H
  dqEjUVQSjuOUyiJKe5GiGF25Xhe3/1VawurCdHfrv6Xmze+lRDHZuEOcV1FrM+zn
  KQXlkpPbL3lU2CpgGFFKlFU=
  -----END PRIVATE KEY-----`;

  const key = RSA.importKey(raw);
  const n =
    18860626341786571281488823024986320858450594409825894653370543036132043241142573896042059032222842653925236802058387508300831766517210547599910735316414515960981281788934868325895562621846910598716519620622800765932541992515497122274302135166053720433521886017494719475895327062855822141735315456613329660043977602681873027347568355824008701177948209784908095092287571982104446342906805480285143028837509076748632094733769028381835899214426100089454654381383340292544225149266603150745375542089871264998183586873913491071542891188124185517417658034185267204900711933432911892469528812455677450346478816563776340692357n;

  const e = 65537n;
  const d =
    675889233296421535959584534071325460876697008626327098961835826056666939623318583538247287416696388446697983317835135300723690022117970081796395234018582764098060974026823771341271141202058228435371968592820841644512299636165137501280011132877728106486853881053264668544941537620562475421678333757690909726581512579603702598150422421865490996288244127528474781858718770957987603681469839575489191876915053252047160475432784849252000744700939988583801783684487872676506769116621572018367654125765915215495461243190782913460732307866572233187464540482209385816659449697777403383908159076257721991916366849321145825505n;
  assertEquals(key.e, e);
  assertEquals(key.n, n);
  assertEquals(key.d, d);
  assertEquals(key.length, 256);

  // Testing key with trailing newline
  const key2 = RSA.importKey(raw + "\n\r\n\r\n\r");
  assertEquals(key2.e, e);
  assertEquals(key2.n, n);
  assertEquals(key2.d, d);
});
